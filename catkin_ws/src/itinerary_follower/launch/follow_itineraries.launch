<!-- <launch>

 <include file="$(find rplidar_ros)/launch/rplidar.launch"/>
 
 <node pkg="tf" type="static_transform_publisher" name="base_to_laser_broadcaster" args="0 0 0 0 0 0 base_link lasers 100" />
 <node pkg="tf" type="static_transform_publisher" name="odom_to_base_link" args="0 0 0 0 0 0 odom base_link 100" />
 <node pkg="tf" type="static_transform_publisher" name="map_to_base_link" args="0 0 0 0 0 0 map base_link 100" />

  <param name="robot_description" command="cat $(find itinerary_follower)/config/robot.urdf" />

  <node name="map_server" pkg="map_server" type="map_server" args="$(env HOME)/robotPix/catkin_ws/maps/map.yaml"/>

  <node pkg="laser_scan_matcher" type="laser_scan_matcher_node" name="laser_scan_matcher">
    <param name="fixed_frame" type="string" value="map"/>
    <param name="base_frame" type="string" value="base_link"/>
    <param name="scan_topic" type="string" value="/scan"/>
    <param name="use_alpha_beta" type="bool" value="false"/>
    <param name="use_odom" type="bool" value="false"/>
  </node>


  <node pkg="amcl" type="amcl" name="amcl">
      <rosparam file="$(find itinerary_follower)/config/amcl.yaml" command="load"/>
    </node>

  <node pkg="move_base" type="move_base" respawn="false" name="move_base" output="screen">
    <rosparam file="$(find itinerary_follower)/config/costmap_common_params.yaml" command="load" ns="global_costmap" />
    <rosparam file="$(find itinerary_follower)/config/costmap_common_params.yaml" command="load" ns="local_costmap" />
    <rosparam file="$(find itinerary_follower)/config/local_costmap_params.yaml" command="load" />
    <rosparam file="$(find itinerary_follower)/config/global_costmap_params.yaml" command="load" />
    <rosparam file="$(find itinerary_follower)/config/base_local_planner_params.yaml" command="load" />
  </node>

  <node pkg="itinerary_follower" 
    type="itinerary_follower_node" 
    name="itineraryController" 
    output="screen"/>

  <node pkg="itinerary_follower" 
    type="itinerary_follower_moveBaseConverter" 
    name="moveBaseConverter" 
    output="screen"/>

</launch> -->
<!-- 
<launch>

 <include file="$(find rplidar_ros)/launch/rplidar.launch"/>

  <param name="robot_description" command="cat $(find itinerary_follower)/config/robot.urdf" />

  <node name="MapServer" pkg="map_server" type="map_server" args="$(env HOME)/robotPix/catkin_ws/maps/map.yaml" />

  <node name="SelfLocalizer" pkg="nav2d_localizer" type="localizer">
      <remap from="scan" to="base_scan"/>
      <param name="min_particles" type="int" value="5000"/>
      <param name="max_particles" type="int" value="20000"/>
  </node>

  <node name="Navigator" pkg="nav2d_navigator" type="navigator">
      <rosparam file="$(find nav2d_tutorials)/param/navigator.yaml"/>
  </node>

  <node name="SetGoal" pkg="nav2d_navigator" type="set_goal_client" />

  <node pkg="itinerary_follower" 
    type="itinerary_follower_node" 
    name="itineraryController" 
    output="screen"/>

  <node pkg="itinerary_follower" 
    type="itinerary_follower_moveBaseConverter" 
    name="moveBaseConverter" 
    output="screen"/>

</launch> -->

<launch>

  <!-- Charger la carte -->
 <node name="MapServer" pkg="map_server" type="map_server" args="$(env HOME)/robotPix/catkin_ws/maps/map.yaml" />

  <!-- <param name="robot_description" command="cat $(find itinerary_follower)/config/robot.urdf" /> -->

  <!-- Lancer le driver RPLidar -->
  <include file="$(find rplidar_ros)/launch/rplidar.launch"/>
<node pkg="tf" type="static_transform_publisher" name="odom_to_base_link_broadcaster" args="0 0 0 0 0 0 odom base_link 100" />

 <!-- <node pkg="amcl" type="amcl" name="amcl">
    <param name="map_file" value="$(env HOME)/robotPix/catkin_ws/maps/map.yaml"/>
    <param name="scan_topic" value="/scan"/>
    <param name="laser_frame_id" value="lasers"/>
    <param name="odom_model_type" value="diff-corrected"/>
    <param name="base_frame_id" value="base_link"/>
    <param name="odom_frame_id" value="odom"/>
    <param name="scan_topic" value="scan"/>
  </node> -->
 <node pkg="tf" type="static_transform_publisher" name="map_nav_broadcaster" args="0 0 0 0 0 0 map nav 100"/>
  <node pkg="tf" type="static_transform_publisher" name="base_link_to_lasers" args="0 0 0 0 0 0 base_link lasers 100"/>
  <node pkg="tf" type="static_transform_publisher" name="map_to_base_link_broadcaster" args="0 0 0 0 0 0 map base_link 100"/>

  <arg name="tf_map_scanmatch_transform_frame_name" default="scanmatcher_frame"/>
  <arg name="base_frame" default="base_link"/>
  <arg name="odom_frame" default="base_link"/>
  <arg name="pub_map_odom_transform" default="true"/>
  <arg name="scan_subscriber_queue_size" default="5"/>
  <arg name="scan_topic" default="scan"/>
  <arg name="map_size" default="100"/>
  
  <node pkg="hector_mapping" type="hector_mapping" name="hector_mapping" output="screen">
    <remap from="map" to="hector_map"/>

    <!-- Frame names -->
    <param name="map_frame" value="map" />
    <param name="base_frame" value="$(arg base_frame)" />
    <param name="odom_frame" value="$(arg odom_frame)" />
    
    <!-- Tf use -->
    <param name="use_tf_scan_transformation" value="true"/>
    <param name="use_tf_pose_start_estimate" value="false"/>
    <param name="pub_map_odom_transform" value="$(arg pub_map_odom_transform)"/>
    
    <!-- Map size / start point -->
    <param name="map_resolution" value="0.050"/>
    <param name="map_size" value="$(arg map_size)"/>
    <param name="map_start_x" value="0.5"/>
    <param name="map_start_y" value="0.5" />
    <param name="map_multi_res_levels" value="2" />
    
    <!-- Map update parameters -->
    <param name="update_factor_free" value="0.4"/>
    <param name="update_factor_occupied" value="0.9" />    
    <param name="map_update_distance_thresh" value="0.4"/>
    <param name="map_update_angle_thresh" value="0.06" />
    <param name="laser_z_min_value" value = "-1.0" />
    <param name="laser_z_max_value" value = "1.0" />

    <param name="advertise_map_service" value="true"/>
    
    <param name="scan_subscriber_queue_size" value="$(arg scan_subscriber_queue_size)"/>
    <param name="scan_topic" value="$(arg scan_topic)"/>
    
    <param name="tf_map_scanmatch_transform_frame_name" value="$(arg tf_map_scanmatch_transform_frame_name)" />
  </node>

  <!-- Lancer votre nÅ“ud C++ pour le suivi de waypoints -->
    <node pkg="itinerary_follower" 
    type="itinerary_follower_node" 
    name="itineraryController" 
    output="screen"/>

</launch>
